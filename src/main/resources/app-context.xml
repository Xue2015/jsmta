<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/task 
						http://www.springframework.org/schema/task/spring-task-4.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
						
	<!-- 自动扫描 -->
	<context:component-scan base-package="org.ihansen.jsmta.dao.impl,org.ihansen.jsmta.service.impl,org.ihansen.jsmta.web,org.ihansen.jsmta.task" />

	<!-- 声明可以使用任务调度注解 -->
	<task:annotation-driven />

	<!-- 数据源分散配置 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	
	<!-- 数据源db1 -->
	<bean id="db1" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="db1_unique" />
		<property name="xaDataSourceClassName" value="${oracle.jdbc.xa.driver}" />
		<property name="xaProperties">
			<props>
				<prop key="user">${db1.jdbc.username}</prop>
				<prop key="password">${db1.jdbc.password}</prop>
				<prop key="URL">${db1.jdbc.url}</prop>
			</props>
		</property>
		<property name="poolSize" value="10" />
	</bean>
	<!-- 数据源db2 -->
	<bean id="db2" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="db2_unique" />
		<property name="xaDataSourceClassName" value="${mysql.jdbc.xa.driver}" />
		<property name="xaProperties">
			<props>
				<prop key="user">${db2.jdbc.username}</prop>
				<prop key="password">${db2.jdbc.password}</prop>
				<prop key="URL">${db2.jdbc.url}</prop>
			</props>
		</property>
		<property name="poolSize" value="10" />
	</bean>
	
	<!-- 序列生成器 -->
	<bean id="oracleDBId" class="org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer">
		<property name="incrementerName" value="BUS_NO_SEQUENCE"/>
		<property name="dataSource" ref="db1"/>
	</bean>
	
	
	<!-- AOP实现数据源的动态切换 -->
	<bean id="dataSourceHolder" class="org.ihansen.jsmta.dao.SqlContextHolder"></bean>
	<aop:config>
		<aop:aspect ref="dataSourceHolder">
			<aop:around pointcut="execution(* org.ihansen.jsmta.dao..*.*(..))" method="setDataSource" />
		</aop:aspect>
	</aop:config>
	
	<!-- 配置JTA的事务管理器 -->     
    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
    	<property name="transactionManager">
    		<bean class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">  
	            <property name="forceShutdown" value="true"/>  
	        </bean>  
	    </property>  
	    <property name="userTransaction">  
	        <bean class="com.atomikos.icatch.jta.UserTransactionImp"/>  
	    </property>
	    <property name="allowCustomIsolationLevels" value="true"/>  
	</bean>
	
	<!-- 可通过注解控制事务 -->
	<tx:annotation-driven transaction-manager="jtaTransactionManager" />  
    <!-- 配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="jtaTransactionManager">  
        <tx:attributes>  
             <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" />  
        </tx:attributes>  
    </tx:advice>
    <aop:config>
        <aop:advisor pointcut="execution(* org.ihansen.jsmta.service.impl.*.*(..))" advice-ref="txAdvice" />
    </aop:config>
    
    <!-- 创建SqlSessionFactory，每一个数据源对应一个SqlSessionFactory -->
	<bean id="db1SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="db1"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:org/ihansen/jsmta/mapper/UserAuthMapper.xml</value>
            </list>
        </property>
    </bean>
    <bean id="db2SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="db2"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:org/ihansen/jsmta/mapper/BusLogMapper.xml</value>
            </list>
        </property>
    </bean>
    
    <!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
    <bean id="sqlSessionTemplate" class="org.ihansen.jsmta.dao.CustomSqlSessionTemplate" scope="prototype">
        <constructor-arg ref="db1SqlSessionFactory" />
        <property name="targetSqlSessionFactorys">
            <map>     
                <entry key="db1" value-ref="db1SqlSessionFactory"/>
                <entry key="db2" value-ref="db2SqlSessionFactory"/>
            </map>
        </property>
    </bean>
    
    <!-- 通过扫描的模式，扫描目录在com.allinpay.zj.proper.domain.operate任意目录下的mapper目录下，所有的mapper都需要继承SqlMapper接口的接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.ihansen.jsmta.domain.operate"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>
</beans>
