<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/task 
						http://www.springframework.org/schema/task/spring-task-4.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
	<!-- 自动扫描 -->
	<context:component-scan
		base-package="com.allinpay.zj.proper.dao.impl,com.allinpay.zj.proper.service.impl,com.allinpay.zj.proper.utils,
					com.allinpay.zj.proper.task" />

	<!-- 声明可以使用任务调度注解 -->
	<task:annotation-driven />

	<!-- 分散配置 -->
	<context:property-placeholder location="classpath:dbcpconfig.properties" />

	<!-- 远程oracle数据源 -->
	<bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="dataSource2_unique" />
		<property name="xaDataSourceClassName" value="${oracle.jdbc.xa.driver}" />
		<property name="xaProperties">
			<props>
				<prop key="user">${db2.jdbc.username}</prop>
				<prop key="password">${db2.jdbc.password}</prop>
				<prop key="URL">${db2.jdbc.url}</prop>
			</props>
		</property>
		<property name="poolSize" value="10" />
	</bean>
	<!-- 本地mysql dbcp池连接 -->
	<bean id="dataSource3" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="dataSource3_unique" />
		<property name="xaDataSourceClassName" value="${mysql.jdbc.xa.driver}" />
		<property name="xaProperties">
			<props>
				<prop key="user">${db3.jdbc.username}</prop>
				<prop key="password">${db3.jdbc.password}</prop>
				<prop key="URL">${db3.jdbc.url}</prop>
			</props>
		</property>
		<property name="poolSize" value="10" />
	</bean>
<!-- 	<bean id="dataSource3" class="com.atomikos.jdbc.SimpleDataSourceBean" init-method="init" destroy-method="close">   -->
<!--         <property name="uniqueResourceName">   -->
<!--             <value>dataSource3_unique</value>   -->
<!--         </property>   -->
<!--         <property name="xaDataSourceClassName">   -->
<!--             <value>${mysql.jdbc.xa.driver}</value>   -->
<!--         </property>   -->
<!--         <property name="xaDataSourceProperties">   -->
<!--             <value>URL=${db3.jdbc.url};user=${db3.jdbc.username};password=${db3.jdbc.password}</value>   -->
<!--         </property>   -->
<!--         <property name="exclusiveConnectionMode">   -->
<!--             <value>true</value>   -->
<!--         </property>   -->
<!--         <property name="connectionPoolSize">   -->
<!--             <value>3</value>   -->
<!--         </property>   -->
<!--         <property name="validatingQuery">   -->
<!--             <value>SELECT 1</value>   -->
<!--         </property>   -->
<!--     </bean> -->

	<!-- 动态数据源()非事务时可用此种方式 -->
<!-- 	<bean id="dynDataSource" class="com.allinpay.zj.proper.dao.DynamicDataSource"> -->
<!-- 		<property name="defaultTargetDataSource" ref="dataSource3" /> -->
<!-- 		<property name="targetDataSources"> -->
<!-- 			<map key-type="java.lang.String"> -->
<!-- 				<entry key="dataSource2" value-ref="dataSource2" /> -->
<!-- 				<entry key="dataSource3" value-ref="dataSource3" /> -->
<!-- 			</map> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<!-- 序列生成器 -->
	<bean id="oracleDBId" class="org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer">
		<property name="incrementerName" value="SEQ_POST_ID" />
		<property name="dataSource" ref="dataSource2"/>
	</bean>
	<bean id="mysqlDBId" class="org.springframework.jdbc.support.incrementer.MySQLMaxValueIncrementer">
		<property name="incrementerName" value="sys_sequence_id"/><!-- 主键维护表名 -->
		<property name="columnName" value="seq_post_id"/><!-- 产生主键的列名 -->
		<property name="cacheSize" value="10"/>
		<property name="dataSource" ref="dataSource3"/>
	</bean>
	
	<!-- AOP实现：1.DAO层数据源动态切换(事务中切换数据源无效);2.动态切换SqlSessionFactory(可进行事务控制) -->
	<bean id="dataSourceHolder" class="com.allinpay.zj.proper.dao.SqlContextHolder"></bean>
	<aop:config>
		<aop:aspect ref="dataSourceHolder">
			<aop:around pointcut="execution(* com.allinpay.zj.proper.dao.impl.*.*(..))" method="setContext" />
		</aop:aspect>
	</aop:config>
	
	<!-- 配置JTA的事务管理器 -->     
    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
    	<property name="transactionManager">
    		<bean class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">  
	            <property name="forceShutdown" value="true"/>  
	        </bean>  
	    </property>  
	    <property name="userTransaction">  
	        <bean class="com.atomikos.icatch.jta.UserTransactionImp"/>  
	    </property>
	    <property name="allowCustomIsolationLevels" value="true"/>  
	</bean>
	
    <!-- 可通过注解控制事务 -->
	<tx:annotation-driven transaction-manager="jtaTransactionManager" />  
    <!-- 配置事务通知 -->
    <tx:advice id="txAdvice" transaction-manager="jtaTransactionManager">  
        <tx:attributes>  
             <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" />  
        </tx:attributes>  
    </tx:advice>
    <aop:config>
        <aop:advisor pointcut="execution(* com.allinpay.zj.proper.service.impl.*.*(..))" advice-ref="txAdvice" />
    </aop:config>
	
	<!-- 创建SqlSessionFactory，每一个数据源对应一个SqlSessionFactory -->
	<bean id="dataSource2SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource2"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:com/allinpay/zj/proper/mapper/CheckBillDiffMapper.xml</value>
                <value>classpath:com/allinpay/zj/proper/mapper/*MSQMapper.xml</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource3sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource3"/>
        <property name="mapperLocations">
            <list>
                <value>classpath:com/allinpay/zj/proper/mapper/UserInfoMapper.xml</value>
                <value>classpath:com/allinpay/zj/proper/mapper/FeedbackRecordMapper.xml</value>
                <value>classpath:com/allinpay/zj/proper/mapper/NameInfoMapper.xml</value>
                <value>classpath:com/allinpay/zj/proper/mapper/SearchRecordMapper.xml</value>
                <value>classpath:com/allinpay/zj/proper/mapper/UserRelationMapper.xml</value>
                <value>classpath:com/allinpay/zj/proper/mapper/VisitRecordMapper.xml</value>
            </list>
        </property>
    </bean>
	
	<!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 -->
    <bean id="sqlSessionTemplate" class="com.allinpay.zj.proper.dao.hoojo.CustomSqlSessionTemplate" scope="prototype">
        <constructor-arg ref="dataSource3sqlSessionFactory" />
        <property name="targetSqlSessionFactorys">
            <map>     
                <entry key="dataSource2" value-ref="dataSource2SqlSessionFactory"/>
                <entry key="dataSource3" value-ref="dataSource3sqlSessionFactory"/>
            </map>
        </property>
    </bean>
	
	<!-- 通过扫描的模式，扫描目录在com/hoo/任意目录下的mapper目录下，所有的mapper都需要继承SqlMapper接口的接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.allinpay.zj.proper.domain.operate"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>
</beans>
